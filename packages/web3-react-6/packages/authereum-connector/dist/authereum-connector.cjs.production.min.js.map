{"version":3,"file":"authereum-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  5: 'goerli',\r\n  42: 'kovan'\r\n}\r\n\r\ninterface AuthereumConnectorArguments {\r\n  chainId: number\r\n  config?: any\r\n}\r\n\r\nexport class AuthereumConnector extends AbstractConnector {\r\n  private readonly chainId: number\r\n  private readonly config: any\r\n\r\n  public authereum: any\r\n\r\n  constructor({ chainId, config = {} }: AuthereumConnectorArguments) {\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.chainId = chainId\r\n    this.config = config\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.authereum) {\r\n      const { default: Authereum } = await import('authereum')\r\n      this.authereum = new Authereum({\r\n        networkName: chainIdToNetwork[this.chainId],\r\n        ...this.config\r\n      })\r\n    }\r\n\r\n    await this.authereum\r\n      .getProvider()\r\n      .enable()\r\n      .then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.authereum.getProvider() }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.authereum.getProvider()\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.authereum.getNetworkId()\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.authereum.getAccountAddress()\r\n  }\r\n\r\n  public deactivate() {}\r\n\r\n  public async close() {\r\n    this.authereum.logout()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainIdToNetwork","chainId","config","supportedChainIds","activate","_this3","authereum","getProvider","enable","then","accounts","provider","this","Authereum","networkName","getChainId","getNetworkId","getAccount","getAccountAddress","deactivate","close","logout","emitDeactivate","AbstractConnector"],"mappings":"4QAGA,IAAMA,EAAkD,GACnD,YACA,YACA,YACA,YACC,4EAcUC,IAAAA,YAASC,OAAAA,aAAS,0BACxB,CAAEC,kBAAmB,CAACF,YAEvBA,QAAUA,IACVC,OAASA,sHAGHE,gEASLC,EAAKC,UACRC,cACAC,SACAC,MAAK,SAACC,UAA+BA,EAAS,8BAE1C,CAAEC,SAAUN,EAAKC,UAAUC,qBAb7BK,sBAAAP,EAAKC,iCAC6B,8QAAO,uCACvCA,UAAY,IAAIO,gBACnBC,YAAad,EAAiBK,EAAKJ,UAChCI,EAAKH,qGAYDK,kDACJK,KAAKN,UAAUC,qDAGXQ,iDACJH,KAAKN,UAAUU,sDAGXC,iDACJL,KAAKN,UAAUY,2DAGjBC,WAAA,eAEMC,4BACXR,KAAKN,UAAUe,SAAfT,KACKU,0EA9C+BC"}