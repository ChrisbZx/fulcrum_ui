{"version":3,"file":"authereum-connector.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\n\r\nconst chainIdToNetwork: { [network: number]: string } = {\r\n  1: 'mainnet',\r\n  3: 'ropsten',\r\n  4: 'rinkeby',\r\n  5: 'goerli',\r\n  42: 'kovan'\r\n}\r\n\r\ninterface AuthereumConnectorArguments {\r\n  chainId: number\r\n  config?: any\r\n}\r\n\r\nexport class AuthereumConnector extends AbstractConnector {\r\n  private readonly chainId: number\r\n  private readonly config: any\r\n\r\n  public authereum: any\r\n\r\n  constructor({ chainId, config = {} }: AuthereumConnectorArguments) {\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.chainId = chainId\r\n    this.config = config\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.authereum) {\r\n      const { default: Authereum } = await import('authereum')\r\n      this.authereum = new Authereum({\r\n        networkName: chainIdToNetwork[this.chainId],\r\n        ...this.config\r\n      })\r\n    }\r\n\r\n    await this.authereum\r\n      .getProvider()\r\n      .enable()\r\n      .then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.authereum.getProvider() }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.authereum.getProvider()\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.authereum.getNetworkId()\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.authereum.getAccountAddress()\r\n  }\r\n\r\n  public deactivate() {}\r\n\r\n  public async close() {\r\n    this.authereum.logout()\r\n    this.emitDeactivate()\r\n  }\r\n}\r\n"],"names":["chainIdToNetwork","AuthereumConnector","chainId","config","supportedChainIds","activate","authereum","getProvider","enable","then","accounts","provider","Authereum","networkName","getChainId","getNetworkId","getAccount","getAccountAddress","deactivate","close","logout","emitDeactivate","AbstractConnector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,gBAAgB,GAAkC;AACtD,KAAG,SADmD;AAEtD,KAAG,SAFmD;AAGtD,KAAG,SAHmD;AAItD,KAAG,QAJmD;AAKtD,MAAI;AALkD,CAAxD;IAaaC,kBAAb;AAAA;;AAME;;;QAAcC,eAAAA;2BAASC;QAAAA,kCAAS;AAC9B,0CAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAACF,OAAD;AAArB,KAAN;AAEA,UAAKA,OAAL,GAAeA,OAAf;AACA,UAAKC,MAAL,GAAcA,MAAd;;AACD;;AAXH;;AAAA,SAaeE,QAbf;AAAA;;+BAsBU,OAAKC,SAAL,CACHC,WADG,GAEHC,MAFG,GAGHC,IAHG,CAGE,UAACC,QAAD;AAAA,iBAAgCA,QAAQ,CAAC,CAAD,CAAxC;AAAA,SAHF;AAKN,iBAAO;AAAEC,YAAAA,QAAQ,EAAE,OAAKL,SAAL,CAAeC,WAAf;AAAZ,WAAP;;;;mBAbK;;;YAAD,CAAC,OAAKD;iCAC6B,OAAO,WAAP;gBAApBM;AACjB,mBAAKN,SAAL,GAAiB,IAAIM,SAAJ;AACfC,cAAAA,WAAW,EAAEb,gBAAgB,CAAC,OAAKE,OAAN;AADd,eAEZ,OAAKC,MAFO,EAAjB;;;;;;AAYH,KA5BH;AAAA;AAAA;AAAA;;AAAA,SA8BeI,WA9Bf;AAAA;mBA+BW;;AAAP,6BAAO,OAAKD,SAAL,CAAeC,WAAf,EAAP;AACD,KAhCH;AAAA;AAAA;AAAA;;AAAA,SAkCeO,UAlCf;AAAA;mBAmCW;;AAAP,6BAAO,OAAKR,SAAL,CAAeS,YAAf,EAAP;AACD,KApCH;AAAA;AAAA;AAAA;;AAAA,SAsCeC,UAtCf;AAAA;mBAuCW;;AAAP,6BAAO,OAAKV,SAAL,CAAeW,iBAAf,EAAP;AACD,KAxCH;AAAA;AAAA;AAAA;;AAAA,SA0CSC,UA1CT,GA0CS,wBA1CT;;AAAA,SA4CeC,KA5Cf;AAAA;oBA6CI;;AAAA,cAAKb,SAAL,CAAec,MAAf;;AACA,cAAKC,cAAL;;;AACD,KA/CH;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAwCC,iBAAxC;;;;"}