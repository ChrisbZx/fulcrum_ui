{"version":3,"file":"abstract-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { EventEmitter } from 'events'\r\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\r\n\r\nexport abstract class AbstractConnector extends EventEmitter {\r\n  public readonly supportedChainIds?: number[]\r\n\r\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\r\n    super()\r\n    this.supportedChainIds = supportedChainIds\r\n  }\r\n\r\n  public abstract async activate(): Promise<ConnectorUpdate>\r\n  public abstract async getProvider(): Promise<any>\r\n  public abstract async getChainId(): Promise<number | string>\r\n  public abstract async getAccount(): Promise<null | string>\r\n  public abstract deactivate(): void\r\n\r\n  protected emitUpdate(update: ConnectorUpdate): void {\r\n    if (__DEV__) {\r\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\r\n    }\r\n    this.emit(ConnectorEvent.Update, update)\r\n  }\r\n\r\n  protected emitError(error: Error): void {\r\n    if (__DEV__) {\r\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\r\n    }\r\n    this.emit(ConnectorEvent.Error, error)\r\n  }\r\n\r\n  protected emitDeactivate(): void {\r\n    if (__DEV__) {\r\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\r\n    }\r\n    this.emit(ConnectorEvent.Deactivate)\r\n  }\r\n}\r\n"],"names":["supportedChainIds","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","emitDeactivate","Deactivate","EventEmitter"],"mappings":"sIAMgBA,cAAkD,MAAlDA,+CAEPA,kBAAoBA,sHASjBC,WAAA,SAAWC,QAIdC,KAAKC,iBAAeC,OAAQH,MAGzBI,UAAA,SAAUC,QAIbJ,KAAKC,iBAAeI,MAAOD,MAGxBE,eAAA,gBAIHN,KAAKC,iBAAeM,gBAhCmBC"}