{"version":3,"file":"trezor-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport Web3ProviderEngine from 'web3-provider-engine'\r\nimport { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor' // https://github.com/0xProject/0x-monorepo/issues/1400\r\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\r\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\r\n\r\ninterface TrezorConnectorArguments {\r\n  chainId: number\r\n  url: string\r\n  pollingInterval?: number\r\n  requestTimeoutMs?: number\r\n  config?: any\r\n  manifestEmail: string\r\n  manifestAppUrl: string\r\n}\r\n\r\nexport class TrezorConnector extends AbstractConnector {\r\n  private readonly chainId: number\r\n  private readonly url: string\r\n  private readonly pollingInterval?: number\r\n  private readonly requestTimeoutMs?: number\r\n  private readonly config: any\r\n  private readonly manifestEmail: string\r\n  private readonly manifestAppUrl: string\r\n\r\n  private provider: any\r\n\r\n  constructor({\r\n    chainId,\r\n    url,\r\n    pollingInterval,\r\n    requestTimeoutMs,\r\n    config = {},\r\n    manifestEmail,\r\n    manifestAppUrl\r\n  }: TrezorConnectorArguments) {\r\n    super({ supportedChainIds: [chainId] })\r\n\r\n    this.chainId = chainId\r\n    this.url = url\r\n    this.pollingInterval = pollingInterval\r\n    this.requestTimeoutMs = requestTimeoutMs\r\n    this.config = config\r\n    this.manifestEmail = manifestEmail\r\n    this.manifestAppUrl = manifestAppUrl\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.provider) {\r\n      const { default: TrezorConnect } = await import('trezor-connect')\r\n      TrezorConnect.manifest({\r\n        email: this.manifestEmail,\r\n        appUrl: this.manifestAppUrl\r\n      })\r\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\r\n      engine.addProvider(new TrezorSubprovider({ trezorConnectClientApi: TrezorConnect, ...this.config }))\r\n      engine.addProvider(new CacheSubprovider())\r\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\r\n      this.provider = engine\r\n    }\r\n\r\n    this.provider.start()\r\n\r\n    return { provider: this.provider, chainId: this.chainId }\r\n  }\r\n\r\n  public async getProvider(): Promise<Web3ProviderEngine> {\r\n    return this.provider\r\n  }\r\n\r\n  public async getChainId(): Promise<number> {\r\n    return this.chainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null> {\r\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {\r\n    this.provider.stop()\r\n  }\r\n}\r\n"],"names":["chainId","url","pollingInterval","requestTimeoutMs","config","manifestEmail","manifestAppUrl","supportedChainIds","activate","provider","start","_this3","this","TrezorConnect","manifest","email","appUrl","engine","Web3ProviderEngine","addProvider","TrezorSubprovider","trezorConnectClientApi","CacheSubprovider","RPCSubprovider","getProvider","getChainId","getAccount","_providers","getAccountsAsync","then","accounts","deactivate","stop","AbstractConnector"],"mappings":"+mBA6BIA,IAAAA,QACAC,IAAAA,IACAC,IAAAA,gBACAC,IAAAA,qBACAC,OAAAA,aAAS,KACTC,IAAAA,cACAC,IAAAA,oCAEM,CAAEC,kBAAmB,CAACP,YAEvBA,QAAUA,IACVC,IAAMA,IACNC,gBAAkBA,IAClBC,iBAAmBA,IACnBC,OAASA,IACTC,cAAgBA,IAChBC,eAAiBA,sHAGXE,kDAcNC,SAASC,QAEP,CAAED,SAAUE,EAAKF,SAAUT,QAASW,EAAKX,YAf3CY,sBAAAD,EAAKF,gCACiC,8QAAO,8CAA/BI,YACjBA,EAAcC,SAAS,CACrBC,MAAOJ,EAAKN,cACZW,OAAQL,EAAKL,qBAETW,EAAS,IAAIC,EAAmB,CAAEhB,gBAAiBS,EAAKT,kBAC9De,EAAOE,YAAY,IAAIC,uBAAoBC,uBAAwBR,GAAkBF,EAAKP,UAC1Fa,EAAOE,YAAY,IAAIG,GACvBL,EAAOE,YAAY,IAAII,iBAAeZ,EAAKV,IAAKU,EAAKR,qBAChDM,SAAWQ,8FAQPO,kDACJZ,KAAKH,gDAGDgB,iDACJb,KAAKZ,+CAGD0B,iDACJd,KAAKH,SAASkB,WAAW,GAAGC,iBAAiB,GAAGC,MAAK,SAACC,UAA+BA,EAAS,6CAGhGC,WAAA,gBACAtB,SAASuB,WA/DmBC"}