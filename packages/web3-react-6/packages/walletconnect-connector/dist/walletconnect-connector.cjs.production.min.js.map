{"version":3,"file":"walletconnect-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\r\n\r\nexport class UserRejectedRequestError extends Error {\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    this.message = 'The user rejected the request.'\r\n  }\r\n}\r\n\r\ninterface WalletConnectConnectorArguments {\r\n  rpc: { [chainId: number]: string }\r\n  bridge?: string\r\n  qrcode?: boolean\r\n  pollingInterval?: number\r\n}\r\n\r\nexport class WalletConnectConnector extends AbstractConnector {\r\n  private readonly rpc: { [chainId: number]: string | undefined }\r\n  private readonly bridge?: string\r\n  private readonly qrcode?: boolean\r\n  private readonly pollingInterval?: number\r\n\r\n  public walletConnectProvider: any\r\n\r\n  constructor({ rpc, bridge, qrcode, pollingInterval }: WalletConnectConnectorArguments) {\r\n    invariant(Object.keys(rpc).length === 1, '@walletconnect/web3-provider is broken with >1 chainId, please use 1')\r\n    super({ supportedChainIds: Object.keys(rpc).map(k => Number(k)) })\r\n\r\n    this.rpc = rpc\r\n    this.bridge = bridge\r\n    this.qrcode = qrcode\r\n    this.pollingInterval = pollingInterval\r\n\r\n    this.handleChainChanged = this.handleChainChanged.bind(this)\r\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\r\n    this.handleDisconnect = this.handleDisconnect.bind(this)\r\n  }\r\n\r\n  private handleChainChanged(chainId: number | string): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\r\n    }\r\n    this.emitUpdate({ chainId })\r\n  }\r\n\r\n  private handleAccountsChanged(accounts: string[]): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\r\n    }\r\n    this.emitUpdate({ account: accounts[0] })\r\n  }\r\n\r\n  private handleDisconnect(): void {\r\n    if (__DEV__) {\r\n      console.log(\"Handling 'disconnect' event\")\r\n    }\r\n    this.emitDeactivate()\r\n    // we have to do this because of a @walletconnect/web3-provider bug\r\n    if (this.walletConnectProvider) {\r\n      this.walletConnectProvider.stop()\r\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\r\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\r\n      this.walletConnectProvider = undefined\r\n    }\r\n\r\n    this.emitDeactivate()\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!this.walletConnectProvider) {\r\n      const { default: WalletConnectProvider } = await import('@walletconnect/web3-provider')\r\n      this.walletConnectProvider = new WalletConnectProvider({\r\n        bridge: this.bridge,\r\n        rpc: this.rpc,\r\n        qrcode: this.qrcode,\r\n        pollingInterval: this.pollingInterval\r\n      })\r\n      // only doing this here because this.walletConnectProvider.wc doesn't have a removeListener function...\r\n      this.walletConnectProvider.wc.on('disconnect', this.handleDisconnect)\r\n    }\r\n\r\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\r\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\r\n\r\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\r\n    if (!this.walletConnectProvider.wc.connected) {\r\n      await this.walletConnectProvider.wc.createSession({ chainId: this.walletConnectProvider.chainId })\r\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\r\n    }\r\n\r\n    const account = await this.walletConnectProvider\r\n      .enable()\r\n      .catch((error: Error): void => {\r\n        // TODO ideally this would be a better check\r\n        if (error.message === 'User closed WalletConnect modal') {\r\n          throw new UserRejectedRequestError()\r\n        }\r\n\r\n        throw error\r\n      })\r\n      .then((accounts: string[]): string => accounts[0])\r\n\r\n    return { provider: this.walletConnectProvider, account }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return this.walletConnectProvider\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return this.walletConnectProvider.send('eth_chainId')\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\r\n  }\r\n\r\n  public deactivate() {\r\n    if (this.walletConnectProvider) {\r\n      this.walletConnectProvider.stop()\r\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\r\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\r\n    }\r\n  }\r\n\r\n  public async close() {\r\n    this.walletConnectProvider.wc.killSession()\r\n  }\r\n}\r\n"],"names":["UserRejectedRequestError","name","_this","constructor","message","Error","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","Object","keys","length","invariant","supportedChainIds","map","k","Number","handleChainChanged","_this2","bind","handleAccountsChanged","handleDisconnect","chainId","emitUpdate","accounts","account","emitDeactivate","this","walletConnectProvider","stop","removeListener","undefined","activate","_this4","enable","error","then","provider","on","wc","connected","createSession","emit","uri","WalletConnectProvider","getProvider","getChainId","send","getAccount","deactivate","close","killSession","AbstractConnector"],"mappings":"o+CAMaA,8DAGJC,KAAOC,EAAKC,YAAYF,OACxBG,QAAU,sDAJ2BC,QAejCC,kCAQGC,IAAAA,IAAKC,IAAAA,OAAQC,IAAAA,OAAQC,IAAAA,uBACK,IAA5BC,OAAOC,KAAKL,GAAKM,QAA3BC,qBACM,CAAEC,kBAAmBJ,OAAOC,KAAKL,GAAKS,KAAI,SAAAC,UAAKC,OAAOD,eAEvDV,IAAMA,IACNC,OAASA,IACTC,OAASA,IACTC,gBAAkBA,IAElBS,mBAAqBC,EAAKD,mBAAmBE,aAC7CC,sBAAwBF,EAAKE,sBAAsBD,aACnDE,iBAAmBH,EAAKG,iBAAiBF,+CAGxCF,mBAAA,SAAmBK,QAIpBC,WAAW,CAAED,QAAAA,OAGZF,sBAAA,SAAsBI,QAIvBD,WAAW,CAAEE,QAASD,EAAS,QAG9BH,iBAAA,gBAIDK,iBAEDC,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,eAAgBH,KAAKV,yBAC1DW,sBAAsBE,eAAe,kBAAmBH,KAAKP,4BAC7DQ,2BAAwBG,QAG1BL,oBAGMM,6EAsBWC,EAAKL,sBACxBM,gBACM,SAACC,MAEgB,oCAAlBA,EAAMjC,cACF,IAAIJ,QAGNqC,KAEPC,MAAK,SAACZ,UAA+BA,EAAS,sBAV3CC,SAYC,CAAEY,SAAUJ,EAAKL,sBAAuBH,QAAAA,QArB1CG,sBAAsBU,GAAG,eAAgBL,EAAKhB,sBAC9CW,sBAAsBU,GAAG,kBAAmBL,EAAKb,4CAGjDa,EAAKL,sBAAsBW,GAAGC,iCAC3BP,EAAKL,sBAAsBW,GAAGE,cAAc,CAAEnB,QAASW,EAAKL,sBAAsBN,8BACnFoB,KAxFkB,gBAwFET,EAAKL,sBAAsBW,GAAGI,6CAlBpDhB,sBAAAM,EAAKL,6CACyC,8QAAO,0DACnDA,sBAAwB,IAAIgB,aAAsB,CACrDtC,OAAQ2B,EAAK3B,OACbD,IAAK4B,EAAK5B,IACVE,OAAQ0B,EAAK1B,OACbC,gBAAiByB,EAAKzB,oBAGnBoB,sBAAsBW,GAAGD,GAAG,aAAcL,EAAKZ,8GA2B3CwB,kDACJlB,KAAKC,6DAGDkB,iDACJnB,KAAKC,sBAAsBmB,KAAK,sDAG5BC,iDACJrB,KAAKC,sBAAsBmB,KAAK,gBAAgBX,MAAK,SAACZ,UAA+BA,EAAS,6CAGhGyB,WAAA,WACDtB,KAAKC,6BACFA,sBAAsBC,YACtBD,sBAAsBE,eAAe,eAAgBH,KAAKV,yBAC1DW,sBAAsBE,eAAe,kBAAmBH,KAAKP,2BAIzD8B,4BACXvB,KAAKC,sBAAsBW,GAAGY,uEA9GUC,2CAjBf"}